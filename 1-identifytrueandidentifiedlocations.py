"""These routines read in the tsv file that is generated by the Stanford NER classifier when one tests
a trained classifier. They then create two new tsvs: the first contains all of the tokens that the trained
classifier identified as a location; the second contains all of the tokens that were identified as
locations in the training data. Once we have these two files, we can check to see whether and to what extent
the trained classifier (correctly) classified locations it had never encountered before."""

#Step One: Find all of the tokens that the trained classifier identified as locations

#import necessary packages
import os
import glob

#identify path to the three column tsv files the Stanford NER classifier generates when one tests a trained classifier.
#use star to identify all files within the directory \results\
path = "C:\\Users\\Douglas\\Desktop\\results\\*"

#create name for output file
out = open("identified.tsv", "w")

#for each file in the directory identified above
for file in glob.glob(path):
    
    #store the file name in memory
    filename = os.path.basename(file)
    
    #open the file in readonly mode
    openfile = open(file, "r")
    
    #read the open file
    readfile = openfile.read()
    
    #convert the file to a string
    strfile = str(readfile)
    
    #split the string each time you encounter a new line (because each token has a unique line in the tsv we're analyzing, this method allows us to analyze each token one by one)
    splitonnewline = strfile.split("\n")
    
    #for each of these split strings (aka for each of these rows in our tsv, or "for each of our tokens")
    for line in splitonnewline:
        
        #split on new tab (this makes each column cell within our already split row string a unique string,
        #so if our tsv had a row that looked like "Montauk   LOC 0" this method allows us to analyze each
        #of those column values individually. splitontab[0] = Montauk, splitontab[1] = LOC, splitontab[2] = 0
        splitontab = line.split("\t")
        
        #if the length of this split row is greater than one (as it ought to be, because it's a three column row that we've just split into three strings)
        if len(splitontab) > 1:
            
            #and if the third column's value is "LOC"--that is, if the trained classifier identified the token as a location
            if splitontab[2] == "LOC":
                
                #write this string to our outfile, using tabs to seperate the data fields of interest (so we can read this output as tsv)
                out.write(str(filename) + "\t" + str(splitontab[0] + "\t" + str(splitontab[1]) + "\t" + str(splitontab[2])+ "\n"))
        else:
            
            #otherwise, if the length of the splitontab list was not greater than 1, do nothing (this if/else condition circumvents potential error messages)
            pass

#Step Two: Find all of the tokens that the training data identified as locations

#identify the path to the same tsv files we analyzed above
path = "C:\\Users\\Douglas\\Desktop\\results\\*"

#create a name for the output file to be generated
out = open("truth.tsv", "w")

#for each file in this path
for file in glob.glob(path):
    
    #store the name of the file in memory
    filename = os.path.basename(file)
    
    #open the file in readonly mode
    openfile = open(file, "r")
    
    #read the file
    readfile = openfile.read()
    
    #convert the file to a string
    strfile = str(readfile)
    
    #split the file each time you encounter a new line
    splitonnewline = strfile.split("\n")
    
    #then, for each of these sttrings in the list "splitonnewline"
    for line in splitonnewline:
        
        #split that string each time you encounter a tab
        splitontab = line.split("\t")
        
        #if the length of the splittab list is greater than 1
        if len(splitontab) > 1:
            
            #and if the second value in the splittab list is "LOC"
            #that is, if the training data identifies this token as a location
            if splitontab[1] == "LOC":
                
                #write that row in the tsv into our output
                out.write(str(filename) + "\t" + str(splitontab[0] + "\t" + str(splitontab[1]) + "\t" + str(splitontab[2])+ "\n"))
        else:
            
            #otherwise, do nothing
            pass
